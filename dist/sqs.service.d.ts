import { OnModuleDestroy, OnModuleInit } from '@nestjs/common';
import { Consumer } from 'sqs-consumer';
import { Producer } from 'sqs-producer';
import { Message, QueueName, SqsOptions } from './sqs.types';
import { DiscoveryService } from '@golevelup/nestjs-discovery';
export declare class SqsService implements OnModuleInit, OnModuleDestroy {
    readonly options: SqsOptions;
    private readonly discover;
    readonly consumers: Map<string, Consumer[]>;
    readonly producers: Map<string, Producer>;
    private logger;
    constructor(options: SqsOptions, discover: DiscoveryService);
    onModuleInit(): Promise<void>;
    onModuleDestroy(): void;
    private getQueueInfo;
    purgeQueue(name: QueueName): Promise<import("@aws-sdk/client-sqs").PurgeQueueCommandOutput>;
    getQueueAttributes(name: QueueName): Promise<{
        All: string;
        ApproximateNumberOfMessages: string;
        ApproximateNumberOfMessagesDelayed: string;
        ApproximateNumberOfMessagesNotVisible: string;
        ContentBasedDeduplication: string;
        CreatedTimestamp: string;
        DeduplicationScope: string;
        DelaySeconds: string;
        FifoQueue: string;
        FifoThroughputLimit: string;
        KmsDataKeyReusePeriodSeconds: string;
        KmsMasterKeyId: string;
        LastModifiedTimestamp: string;
        MaximumMessageSize: string;
        MessageRetentionPeriod: string;
        Policy: string;
        QueueArn: string;
        ReceiveMessageWaitTimeSeconds: string;
        RedriveAllowPolicy: string;
        RedrivePolicy: string;
        SqsManagedSseEnabled: string;
        VisibilityTimeout: string;
    }>;
    getProducerQueueSize(name: QueueName): Promise<number>;
    send<T = any>(name: QueueName, payload: Message<T> | Message<T>[]): Promise<import("@aws-sdk/client-sqs").SendMessageBatchResultEntry[]>;
}
